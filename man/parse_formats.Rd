% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sas.R
\name{parse_formats}
\alias{parse_formats}
\alias{apply_formats}
\title{Get formats from \code{SAS} format files}
\usage{
parse_formats(formats, invert = FALSE)

apply_formats(
  x,
  formats,
  invert = FALSE,
  droplevels = FALSE,
  format_value = attr(x, "format.sas")
)
}
\arguments{
\item{formats}{for \code{parse_formats} or \code{apply_formats}, a
character string or a file path to a text file with formats to parse;
\code{apply_formats} also supports named vectors, usually the result of
\code{parse_formats}}

\item{invert}{logical; if \code{TRUE}, swaps the format values and labels}

\item{x}{a vector of data, usually taking a small number of distinct
values which should be formatted}

\item{droplevels}{logical; if \code{TRUE}, unused factor levels will be
dropped; default is to keep unused levels}

\item{format_value}{a character string identifying the format value which
should be applied to \code{x}; note this is only required if \code{formats}
is a file path and the default format attribute label is not stored in
\code{attr(x, 'format.sas')} (a format value consists of unique levels of
\code{x} and the respective labels)}
}
\value{
If a file path is passed to \code{parse_formats}, a list with format names
found in \code{path} and their respective values and labels as named
character vectors; if a character vector is passed, a character vector of
values with labels as names.

For \code{apply_formats}, the input vector, \code{x}, recoded with the
formats given by \code{formats}.
}
\description{
\code{parse_formats} reads text files (usually \code{*.sas}) or character
strings and extract \code{SAS} format labels and values.

\code{apply_formats} takes a vector, \code{x}, of values and applies the
corresponding \code{formats}.
}
\examples{
p <- system.file('testfiles', 'formats.sas', package = 'rawr2')
cat(readLines(p), sep = '\n')
parse_formats(p)


## named vector of formats from string
formats <- '0 = zero, 1 = uno; 2 = yada. -9=yadayadayada, .C=blah'
parse_formats(formats)

## reordered if all levels are numeric and positive
parse_formats('1=yes, 0=no, 2=maybe')
parse_formats('1=yes, 0=no, 2=maybe;-1=unk')


## format factor variables from an unparsed character string
apply_formats('.C', formats)
apply_formats('.C', formats, droplevels = TRUE)

## or formats that have already been parsed
apply_formats('.C', parse_formats(formats), droplevels = TRUE)


x <- sample(0:2, 10, TRUE)
apply_formats(x, setNames(letters[1:5], 0:4))

fmt <- apply_formats(x, formats)
table(apply_formats(x, formats), x)

}
\seealso{
\code{\link{sas_path}}, \code{\link{rmacro}}, \code{\link{r2sas}},
\code{\link{get_margs}}, \code{\link{sas_mget}},
\code{\link{source_sas}}, \code{\link{sas_catalog}}
}
